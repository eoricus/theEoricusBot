import "paint-console";

// Load environment variables from .env file
import * as dotenv from "dotenv";
dotenv.config({ path: __dirname + "/../.env" });

// Default answers
import answers from "./answers";

// DataBase
import data from "./data";

import posts from "./posts.json";

import { Telegram, MessageContext, InlineKeyboard } from "puregram";
import { HearManager } from "@puregram/hear";

const telegram = Telegram.fromToken(process.env.TG_TOKEN as string);

const hearManager = new HearManager<MessageContext & ExtraData>();

import { Configuration, OpenAIApi } from "openai";
const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

interface ExtraData {
  IsUserRegistered: boolean;
  lastRequests: { text: string; wasSendAt: Date; answer: string }[];
}

telegram.updates.on(
  "message",
  async (context: MessageContext & ExtraData, next) => {
    let user = await data.user.findOne({ userID: context.senderId });

    if (user) {
      context.IsUserRegistered = true;
      context.lastRequests = user.requests;
    } else {
      user = await data.user.create({
        userID: context.senderId,
        isPremium: false,
        requests: [],
      });
      context.IsUserRegistered = false;
      context.lastRequests = user.requests;
    }

    console.log(context.lastRequests);
    return next();
  }
);
telegram.updates.on("message", hearManager.middleware);

hearManager.hear(/start/i, async (context: MessageContext & ExtraData) => {
  context.send(
    `
<code>hello, world!</code>\n\n\
–Ø —á–∞—Ç-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π @eoricus. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\
<code>/start</code> -- –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\
<code>/help</code> -- —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (—Ç–æ, —á—Ç–æ –≤—ã —Å–µ–π—á–∞—Å –≤–∏–¥–∏—Ç–µ)\n\
<code>/ai (–∑–∞–ø—Ä–æ—Å) </code> -- –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∏—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å –º–æ–∏–º —Ä–∞–∑—É–º–æ–º (–Ω–µ –±–æ–ª—å—à–µ 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç —é–∑–µ—Ä–∞ –≤ –¥–µ–Ω—å)\n\
<code>/on –∏–ª–∏ /off</code> -- –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
`,
    { parse_mode: "HTML" }
  );
});

hearManager.hear(/help/i, (context: MessageContext & ExtraData) =>
  context.send(
    `
    –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\
<code>/start</code> -- –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\
<code>/help</code> -- —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (—Ç–æ, —á—Ç–æ –≤—ã —Å–µ–π—á–∞—Å –≤–∏–¥–∏—Ç–µ)\n\
<code>/ai (–∑–∞–ø—Ä–æ—Å) </code> -- –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∏—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å –º–æ–∏–º —Ä–∞–∑—É–º–æ–º (–Ω–µ –±–æ–ª—å—à–µ 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç —é–∑–µ—Ä–∞ –≤ –¥–µ–Ω—å)\n\
<code>/on –∏–ª–∏ /off</code> -- –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
`,
    { parse_mode: "HTML" }
  )
);

// hearManager.hear(/delay/i, (context: MessageContext & ExtraData) =>
//   context.send("dw", { parse_mode: "HTML" })
// );

hearManager.hear(/on/i, async (context: MessageContext & ExtraData) => {
  if (!context.isPM()) {
    let chat = await data.chat.findOneAndUpdate(
      { chatID: context.chatId },
      {
        $set: {
          mailing: true,
        },
      }
    );
    if (!chat) {
      chat = await data.chat.create({
        chatID: context.chatId,
        isPremium: false,
        requests: [],
        delay: 40,
        offset: 0,
        mailing: true,
      });
    }

    context.send(
      chat?.mailing
        ? "–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞, –≤—ã —É–∂–µ –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ—Å—Ç—ã –æ—Ç –ª—É—á—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–∞ –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π"
        : "–†–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ—Å—Ç—ã –æ—Ç –ª—É—á—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–∞ –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π",
      { parse_mode: "HTML" }
    );
  } else {
    context.send(
      "–†–∞—Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö. –ó–∞—á–µ–º –≤–∞–º —Ä–∞—Å—Å—ã–ª–∫–∞? –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è!\n\n@eoricus"
    );
  }
});

hearManager.hear(/off/i, async (context: MessageContext & ExtraData) => {
  if (!context.isPM()) {
    let chat = await data.chat.findOneAndUpdate(
      { chatID: context.chatId },
      {
        $set: {
          mailing: false,
        },
      }
    );

    if (!chat) {
      chat = await data.chat.create({
        chatID: context.chatId,
        isPremium: false,
        requests: [],
        delay: 40,
        offset: 0,
        mailing: false,
      });
    }

    context.send(
      !chat?.mailing
        ? "–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –≤—ã –∏ —Ç–∞–∫ –ª–∏—à–µ–Ω—ã –ø–æ—Å—Ç–æ–≤ –æ—Ç –ª—É—á—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–∞ –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π"
        : "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ—Å—Ç—ã –æ—Ç –ª—É—á—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–∞ –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π",
      { parse_mode: "HTML" }
    );
    console.log(chat);
  } else {
    context.send(
      "–†–∞—Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö. –ó–∞—á–µ–º –≤–∞–º —Ä–∞—Å—Å—ã–ª–∫–∞? –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è!\n\n@eoricus"
    );
  }
});

hearManager.hear(/ai(.*)/i, async (context: MessageContext & ExtraData) => {
  let prompt = context.text?.match(/ai(?<Prompt>.*)/i)?.groups?.Prompt;
  let user = await data.user.findOne({
    userID: context.senderId,
  });

  if (!user) {
    return context.send(
      "–≠—ç—ç... –¢—É—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —à–æ–∫–æ–ª–∞–¥–∫–∏ –∫–æ—Ä–µ—à, —è –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é —Å —Ç–æ–±–æ–π"
    );
  }

  if (prompt) {
    if (user.requests.length >= 10) {
      console.log(user.requests[0].wasSendAt.getTime() - new Date().getTime());
      if (
        user.requests[0].wasSendAt.getTime() - new Date().getTime() <=
        86400
      ) {
        return context.send(
          "–≠—ç—ç... –ò–∑–≤–∏–Ω–∏ –∫–æ—Ä–µ—à, —è –Ω–µ –æ—Ç–≤–µ—á–∞—é –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏. –í—Ä–µ–º—è –¥–µ–Ω—å–≥–∏, —Å–∞–º –ø–æ–Ω–∏–º–∞–µ—à—å. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø -- –ø–∏—à–∏ @theEoricus"
        );
      } else {
        data.user.updateOne(
          {
            userID: context.senderId,
          },
          {
            $set: {
              requests: [
                {
                  text: prompt,
                  wasSendAt: new Date(),
                },
              ],
            },
          }
        );
      }
    }

    const chat = await openai.createChatCompletion({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: posts.prompt + posts.posts.join(";\n\n"),
        },
        {
          role: "user",
          content: prompt,
        },
      ],
    });

    context.send(chat.data.choices[0].message?.content || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
    await data.user.updateOne(
      {
        userID: context.senderId,
      },
      {
        $push: {
          requests: {
            text: prompt,
            wasSendAt: new Date(),
          },
        },
        $inc: {
          total: 1,
        },
      }
    );
  } else {
    context.send(
      "–î–∞-–¥–∞, —è –∑–∞–≥—Ä—É–∑–∏–ª —Å–µ–±—è –≤ —á–∞—Ç–ì–ü–¢. –ß—Ç–æ–±—ã –≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –º–Ω–æ–π, –æ—Ç–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ '/ai'"
    );
  }
});

hearManager.onFallback((context) => context.send("command not found."));

telegram.updates.on("channel_post", async (context) => {
  if (context.chat.id != -1001734030085) {
    return;
  }
  let chats = await data.chat.find({});

  chats.forEach((chat) => {
    if (chat.mailing) {
      telegram.api.forwardMessage({
        chat_id: chat.chatID,
        from_chat_id: context.chat.id,
        message_id: context.id,
      });

      telegram.api.sendMessage({
        chat_id: chat.chatID,
        text: "üëÜüëÜüëÜ\n–ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ —Ç–≤–æ–µ–º –ª—é–±–∏–º–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–µ \n\n(–í—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /off)",
      });
    }
  });
});

telegram.updates
  .startPolling()
  .then(() => {
    console.info(`[@${telegram.bot.username}] Started polling`);
    telegram.api.setMyCommands({
      commands: [
        {
          command: "/start",
          description: "–ù–∞—á–∞—Ç—å",
        },
        {
          command: "/help",
          description: "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
        },
        {
          command: "/ai",
          description: "–û—Ç–≤–µ—Ç—ã –æ—Ç –ò–ò –≤ –º–æ–µ–º —Å—Ç–∏–ª–µ",
        },
        {
          command: "/on",
          description: "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É",
        },
        {
          command: "/off",
          description: "–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏",
        },
      ],
    });
  })
  .catch(console.error);
